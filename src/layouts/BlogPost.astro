---
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import MatomoTracking from '../components/MatomoTracking.astro';

import '../styles/markdown.scss';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, category, heroImage, ogImage, plain } = Astro.props;
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} image={ogImage?.src} />
    <MatomoTracking />
  </head>

  <body>
    <Header />
    <main class="layout-blog-post">
      <article class="md">
        {heroImage && (
          <div class="hero-image">
            <Image 
              src={heroImage}
              alt={title}
              widths={[320, 480, 680, 1360]}
              sizes="(max-width: 1024px) 98vw, 680px"
              class="cover-image"
            />
          </div>
        )}
        <div class="title">
          <span class="meta">
            <time datetime={pubDate.toISOString()}>
              {(() => {
                const now = new Date();
                const diff = now.getTime() - pubDate.getTime();
                const rtf = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });

                const minute = 60 * 1000;
                const hour = 60 * minute;
                const day = 24 * hour;
                const month = 30 * day;
                const year = 365 * day;

                if (diff < month) {
                  return rtf.format(-Math.round(diff / day), 'day');
                } else if (diff < year) {
                  return rtf.format(-Math.round(diff / month), 'month');
                } else {
                  return new Intl.DateTimeFormat('en', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  }).format(pubDate);
                }
              })()}
            </time>
            <span class="category">
              in <span class="tag">{category}</span>
            </span>
          </span>
          <h1>{title}</h1>
        </div>
        {plain ? (
          <div class="description" set:html={description}></div>
        ) : (
          <slot />
        )}
      </article>
    </main>
    <Footer />
  </body>
</html>

<style lang="scss">
  .layout-blog-post {
    margin-top: 4rem;
  }

  .hero-image {
    img {
      margin: 0;
      width: 100%;
      height: auto;
      border-radius: 6px;
      display: block;
    }
  }

  .title {
    margin: 1rem 0 2rem 0;

    h1{
      margin-top: .5rem;
    }
  }

  .meta{
    font-family: var(--font-family-mono);
    text-transform: uppercase;
    font-size: .875rem;
    color: var(--gray-10);
  }

  .tag{
    padding: 2px 6px;
    background: var(--gray-3);
    border-radius: 6px;
    color: var(--gray-11);
  }

  .date{
    color: var(--gray-10);
    font-size: .875rem;
  }

  .last-updated-on {
    margin-left: 1rem;
  }
</style>
