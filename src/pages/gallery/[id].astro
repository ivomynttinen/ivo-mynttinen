---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { Image } from 'astro:assets';
import galleryData from '../../data/gallery.json';
import { slugMap, getSlugById } from '../../utils/slugs';
import OgImage from '../../assets/images/og-image-gallery.png';

import '../../styles/gallery-modal.scss';

const ogImageToUse = OgImage?.src;

// Fix the image import section
const images = await import.meta.glob('../../assets/gallery/*.{png,jpg,jpeg,gif,webp}', {
  eager: true,
});

// Create a map of filenames to their image objects
const imageMap = new Map();
for (const [path, image] of Object.entries(images)) {
  const filename = path.split('/').pop();
  if (filename) {
    imageMap.set(filename, image.default);
  }
}

// Helper function to check if file is a GIF
const isGif = (filename: string) => filename.toLowerCase().endsWith('.gif');

// Helper function to generate URL-friendly slug
function generateSlug(name: string): string {
  return name
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-') // Replace non-alphanumeric chars with hyphens
    .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens
}

// Generate unique slugs for all items
const slugMap = new Map();
galleryData.forEach(item => {
  let baseSlug = generateSlug(item.name);
  let slug = baseSlug;
  let counter = 1;
  
  // If slug already exists, append part of the ID
  while (slugMap.has(slug)) {
    // Use first 6 characters of ID to keep URLs reasonably short
    slug = `${baseSlug}-${item.id.substring(0, 6)}`;
  }
  
  slugMap.set(slug, item);
});

// Debug logging in dev mode
if (import.meta.env.DEV) {
  console.log('Available image files:', Array.from(imageMap.keys()));
}

export async function getStaticPaths() {
  return galleryData.map((item, index) => {
    const slug = getSlugById(item.id);
    return {
      params: { id: slug },
      props: { 
        item,
        prevItem: index > 0 ? galleryData[index - 1] : null,
        nextItem: index < galleryData.length - 1 ? galleryData[index + 1] : null,
        index,
        slug
      }
    };
  });
}

const { id } = Astro.params;
const { item, prevItem, nextItem, index, slug } = Astro.props;

// Get slugs for navigation
const prevSlug = prevItem ? getSlugById(prevItem.id) : null;
const nextSlug = nextItem ? getSlugById(nextItem.id) : null;

const imageSource = imageMap.get(item.filename);
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={item.name} description={`Gallery item: ${item.name}`} image={ogImageToUse} />
  </head>
  <body>
    <Header activePath="gallery" />
    <main id="gallery-item" class="gallery-item-page">
      <div class="gallery-item-content">
        <div class="image-container">
          {isGif(item.filename) ? (
            <img
              src={imageSource.src}
              alt={item.name}
              width={item.width}
              height={item.height}
              loading="eager"
            />
          ) : (
            <Image
              src={imageSource}
              alt={item.name}
              width={item.width}
              height={item.height}
              widths={[320, 640, 980, 1400, 1800, 2400]}
              sizes="(max-width: 1024px) 98vw, calc(100vw - 340px)"
              loading="eager"
            />
          )}
        </div>
        <aside class="gallery-metadata">
          <a 
            href="/gallery" 
            class="back-to-gallery" 
            data-astro-history="replace"
            data-index={index}
          >
            ‚Üê Back to Gallery
          </a>
          <h1>{item.name}</h1>

          <hr>
          
          {item.palettes && item.palettes.length > 0 && (
            <section>
              <h2>Color Palette</h2>
              <ul class="color-palette">
                {item.palettes.map(({ color, ratio }) => (
                  <li 
                    style={`background-color: rgb(${color.join(',')})`}
                    title={`RGB(${color.join(', ')}) - ${ratio.toFixed(1)}%`}
                  />
                ))}
              </ul>
            </section>
          )}
          
          {item.tags && item.tags.length > 0 && (
            <section>
              <h2>Tags</h2>
              <ul class="tags-list">
                {item.tags.map((tag) => (
                  <li class="tag">{tag}</li>
                ))}
              </ul>
            </section>
          )}
          
          {item.url && (
            <section>
              <h2>Source</h2>
              <span>
                <a href={item.url} target="_blank" rel="noopener noreferrer">
                  {new URL(item.url).hostname.replace(/^www\./, '')}
                </a>
              </span>
            </section>
          )}

          <section>
            <h2>Created</h2>
            <span>{new Date(item.btime).toLocaleString('de-DE')}</span>
          </section>
        </aside>
      </div>
    </main>
    <Footer class="layout-blog" />
  </body>
</html>

<style lang="scss">
  .gallery-item-page{
    margin-top: 4rem;
  }

  .gallery-metadata{
    padding: 1rem 0 0 0;
  }

  .back-to-gallery{
    display: flex;
  }

  @media (min-width: 768px) {
    body > main{
      max-width: 100%;
      padding: 0 1rem;
    }
  }

  @media (min-width: 1024px) {
    .gallery-metadata{
      padding: 0 2rem 2rem 2rem;
    }
  }
</style>
