---
import BaseHead from '../../../components/BaseHead.astro';
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import MatomoTracking from '../../../components/MatomoTracking.astro';
import { Image } from 'astro:assets';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../../consts';
import galleryData from '../../../data/gallery.json';
import { getSlugById } from '../../../utils/slugs';
import GalleryItem from '../../../components/GalleryItem.astro';
import RSSIcon from '../../../assets/images/rss.svg?raw';
import FilterIcon from '../../../assets/images/filter.svg?raw';
import OgImage from '../../../assets/images/og-image-gallery.png';

export async function getStaticPaths() {
  const itemsPerPage = 100;
  const totalItems = galleryData.length;
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  return Array.from({ length: totalPages }, (_, i) => ({
    params: { page: (i + 1).toString() },
  }));
}

import '../../../styles/gallery-modal.scss';

const ogImageToUse = OgImage?.src;

// Get the current page from the URL parameter
const { page } = Astro.params;
const currentPage = parseInt(page);

// Redirect if page is not a valid number or less than 1
if (isNaN(currentPage) || currentPage < 1) {
  return Astro.redirect('/gallery/page/1');
}

// Pagination settings
const itemsPerPage = 100;
const totalItems = galleryData.length;
const totalPages = Math.ceil(totalItems / itemsPerPage);

// Redirect if page number is too high
if (currentPage > totalPages) {
  return Astro.redirect('/gallery/page/1');
}

// Replace the image import section with this:
const images = import.meta.glob('../../../assets/gallery/*.{png,jpg,jpeg,gif,webp}', {
  eager: true,
});

// Create a map of filenames to their image objects
const imageMap = new Map();
for (const [path, image] of Object.entries(images)) {
  const filename = path.split('/').pop();
  if (filename) {
    imageMap.set(filename, image.default);
  }
}

// Helper function to check if file is a GIF
const isGif = (filename: string) => filename.toLowerCase().endsWith('.gif');

// Helper function to generate URL-friendly slug
function generateSlug(name: string): string {
  return name
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-') // Replace non-alphanumeric chars with hyphens
    .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens
}

// Generate unique slugs for all items
const slugMap = new Map();
galleryData.forEach(item => {
  let baseSlug = generateSlug(item.name);
  let slug = baseSlug;
  
  // If slug already exists, append part of the ID
  while (slugMap.has(slug)) {
    // Use first 6 characters of ID to keep URLs reasonably short
    slug = `${baseSlug}-${item.id.substring(0, 6)}`;
  }
  
  slugMap.set(slug, item);
});

// Sort and filter helpers
const sortByDate = (a: any, b: any) => b.btime - a.btime;

// Get unique folders and tags from gallery data, excluding specific folders
const excludedFolders = ['Personal 2024', 'Website 2024'];
const uniqueFolders = [...new Set(galleryData.flatMap(item => item.folders || []))].filter(folder => !excludedFolders.includes(folder));
const uniqueTags = [...new Set(galleryData.flatMap(item => item.tags || []))];

// Get date range with fixed minimum date
const dates = galleryData.map(item => item.btime);
const maxDate = new Date(Math.max(...dates)).toISOString().split('T')[0];
const minDate = '2010-01-01'; // Set fixed minimum date

// Sort items by date descending and get current page items
const sortedGalleryData = [...galleryData].sort(sortByDate);
const startIndex = (currentPage - 1) * itemsPerPage;
const endIndex = startIndex + itemsPerPage;
const currentPageItems = sortedGalleryData.slice(startIndex, endIndex);
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Ivo's Design Inspiration Gallery - Page ${currentPage}`} description='Designs of websites, apps and other digital products carefully curated by Ivo Mynttinen.' image={ogImageToUse} />
    <MatomoTracking />
  </head>
  <body>
    <div class="gallery-grid" id="gallery-grid">
      {currentPageItems.map((item) => (
        <GalleryItem item={item} imageMap={imageMap} />
      ))}
    </div>
  </body>
</html>
