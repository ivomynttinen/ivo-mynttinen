---
import BaseHead from '../../../components/BaseHead.astro';
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import MatomoTracking from '../../../components/MatomoTracking.astro';
import { Image } from 'astro:assets';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../../consts';
import galleryData from '../../../data/gallery.json';
import { getSlugById } from '../../../utils/slugs';
import GalleryItem from '../../../components/GalleryItem.astro';
import RSSIcon from '../../../assets/images/rss.svg?raw';
import FilterIcon from '../../../assets/images/filter.svg?raw';
import OgImage from '../../../assets/images/og-image-gallery.png';

export async function getStaticPaths() {
  const itemsPerPage = 100;
  const totalItems = galleryData.length;
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  return Array.from({ length: totalPages }, (_, i) => ({
    params: { page: (i + 1).toString() },
  }));
}

import '../../../styles/gallery-modal.scss';

const ogImageToUse = OgImage?.src;

// Get the current page from the URL parameter
const { page } = Astro.params;
const currentPage = parseInt(page);

// Redirect if page is not a valid number or less than 1
if (isNaN(currentPage) || currentPage < 1) {
  return Astro.redirect('/gallery/page/1');
}

// Pagination settings
const itemsPerPage = 100;
const totalItems = galleryData.length;
const totalPages = Math.ceil(totalItems / itemsPerPage);

// Redirect if page number is too high
if (currentPage > totalPages) {
  return Astro.redirect('/gallery/page/1');
}

// Replace the image import section with this:
const images = import.meta.glob('../../../assets/gallery/*.{png,jpg,jpeg,gif,webp}', {
  eager: true,
});

// Create a map of filenames to their image objects
const imageMap = new Map();
for (const [path, image] of Object.entries(images)) {
  const filename = path.split('/').pop();
  if (filename) {
    imageMap.set(filename, image.default);
  }
}

// Helper function to check if file is a GIF
const isGif = (filename: string) => filename.toLowerCase().endsWith('.gif');

// Helper function to generate URL-friendly slug
function generateSlug(name: string): string {
  return name
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-') // Replace non-alphanumeric chars with hyphens
    .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens
}

// Generate unique slugs for all items
const slugMap = new Map();
galleryData.forEach(item => {
  let baseSlug = generateSlug(item.name);
  let slug = baseSlug;
  
  // If slug already exists, append part of the ID
  while (slugMap.has(slug)) {
    // Use first 6 characters of ID to keep URLs reasonably short
    slug = `${baseSlug}-${item.id.substring(0, 6)}`;
  }
  
  slugMap.set(slug, item);
});

// Sort and filter helpers
const sortByDate = (a: any, b: any) => b.btime - a.btime;

// Get unique folders and tags from gallery data, excluding specific folders
const excludedFolders = ['Personal 2024', 'Website 2024'];
const uniqueFolders = [...new Set(galleryData.flatMap(item => item.folders || []))].filter(folder => !excludedFolders.includes(folder));
const uniqueTags = [...new Set(galleryData.flatMap(item => item.tags || []))];

// Get date range with fixed minimum date
const dates = galleryData.map(item => item.btime);
const maxDate = new Date(Math.max(...dates)).toISOString().split('T')[0];
const minDate = '2010-01-01'; // Set fixed minimum date

// Sort items by date descending and get current page items
const sortedGalleryData = [...galleryData].sort(sortByDate);
const startIndex = (currentPage - 1) * itemsPerPage;
const endIndex = startIndex + itemsPerPage;
const currentPageItems = sortedGalleryData.slice(startIndex, endIndex);
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Ivo's Design Inspiration Gallery - Page ${currentPage}`} description='Designs of websites, apps and other digital products carefully curated by Ivo Mynttinen.' image={ogImageToUse} />
    <MatomoTracking />
  </head>
  <body>
    <Header activePath="gallery" />
    <main class="layout-gallery">
      <section class="gallery">
        <div class="page-title">
          <h1>Gallery</h1>
          <a href="/gallery.rss.xml" title="Subscribe to RSS Feed" class="rss-icon">
            <Fragment set:html={RSSIcon} />
          </a>
        </div>
        <p class="intro">
          Design inspiration gallery carefully curated by myself. <a href="/blog/publishing-eagle-app-library-on-the-web-part-1/">Read</a> more about how all this works.
        </p>
        
        <div class="filter-controls">
          <div class="filter-toggles">
            <div class="filter-toggle-wrapper">
              <button id="toggleFilters" class="filter-button">
                <Fragment set:html={FilterIcon} />
                Filters
              </button>
              <button id="resetFilters" class="filter-button" style="display: none;">Reset</button>
            </div>
            <span id="resultCount" class="result-count">{currentPageItems.length} items (page {currentPage} of {totalPages})</span>
          </div>

          <div class="filter-toolbar open">
            <div class="filter-section">
              <h3>Categories</h3>
              <div class="filter-buttons" id="folderFilter">
                {uniqueFolders.map(folder => {
                  const urlSafeCategory = folder.toLowerCase().replace(/\s+/g, '-');
                  return (
                    <a 
                      class="filter-btn"
                      href={`/gallery/${urlSafeCategory}/`}
                    >
                      {folder}
                    </a>
                  );
                })}
              </div>
            </div>
  
            <div class="filter-section">
              <h3>Tags</h3>
              <div class="filter-buttons" id="tagFilter">
                {uniqueTags.map(tag => {
                  const urlSafeTag = tag.toLowerCase().replace(/\s+/g, '-');
                  return (
                    <a 
                      class="filter-btn"
                      href={`/gallery/${urlSafeTag}/`}
                    >
                      {tag}
                    </a>
                  );
                })}
              </div>
            </div>
          </div>
        </div>

        <div class="gallery-grid" id="gallery-grid">
          {currentPageItems.map((item) => (
            <GalleryItem item={item} imageMap={imageMap} />
          ))}
        </div>

        <nav class="pagination">
          {currentPage > 1 && (
            <a href={`/gallery/page/${currentPage - 1}`} class="pagination-link prev">
              ← Previous Page
            </a>
          )}
          {currentPage < totalPages && (
            <a href={`/gallery/page/${currentPage + 1}`} class="pagination-link next">
              Next Page →
            </a>
          )}
        </nav>
      </section>
    </main>
    <Footer class="layout-blog" />
    
    <div id="gallery-modal" class="gallery-modal">
      <header class="modal-header">
        <nav class="modal-navigation">
          <button class="key nav-button prev" aria-label="Previous image">←</button>
          <button class="key nav-button next" aria-label="Next image">→</button>
        </nav>
        <button class="key modal-close" aria-label="Close modal">×</button>
      </header>
      <div class="modal-content"></div>
    </div>

    <template id="gallery-item-template">
      <div class="gallery-item" data-show="true">
        <a>
          <div class="error-placeholder">Loading...</div>
          <div class="gallery-item-info"></div>
        </a>
      </div>
    </template>
  </body>
</html>

<script>
  function initializeGallery() {
    // Wait for elements to be available
    const filterToolbar = document.querySelector('.filter-toolbar');
    const toggleFiltersBtn = document.getElementById('toggleFilters');
    const galleryGrid = document.getElementById('gallery-grid');

    if (!filterToolbar || !toggleFiltersBtn || !galleryGrid) {
      return;
    }

    // Add modal functionality
    const modal = document.getElementById('gallery-modal');
    const modalContent = modal?.querySelector('.modal-content');
    const modalClose = modal?.querySelector('.modal-close');

    async function openModal(url) {
      if (!modal || !modalContent) return;
      
      try {
        const response = await fetch(url);
        const html = await response.text();
        
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        
        const content = doc.getElementById('gallery-item');
        if (content) {
          modalContent.innerHTML = content.innerHTML;
          modal.style.display = 'block';
          // Trigger reflow to ensure display takes effect
          modal.offsetHeight;
          modal.classList.add('open');
          document.body.style.overflow = 'hidden';
        }
      } catch (error) {
        console.error('Error loading gallery item:', error);
        Astro.redirect(url);
      }
    }

    function closeModal() {
      if (!modal) return;
      modal.classList.remove('open');
      document.body.style.overflow = '';
      
      // Wait for transition to complete before hiding
      setTimeout(() => {
        if (!modal.classList.contains('open')) {
          modal.style.display = 'none';
        }
      }, 200); // Match transition duration
      
      const currentPath = window.location.pathname;
      if (!currentPath.includes('/gallery/page/')) {
        history.pushState({}, '', '/gallery/');
      }
    }

    // Handle gallery item clicks
    document.addEventListener('click', (e) => {
      const galleryLink = e.target.closest('.gallery-item a');
      if (galleryLink) {
        e.preventDefault();
        const url = galleryLink.href;
        history.pushState({}, '', url);
        openModal(url);
      }
    });

    // Close modal on button click
    modalClose?.addEventListener('click', () => {
      closeModal();
    });

    // Close modal on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal?.classList.contains('open')) {
        closeModal();
      }
    });

    // Handle browser back/forward
    window.addEventListener('popstate', () => {
      if (modal?.classList.contains('open')) {
        closeModal();
      } else if (location.pathname.startsWith('/gallery/')) {
        openModal(location.pathname);
      }
    });

    // Modal navigation functions
    function navigateModal(direction) {
      const currentUrl = window.location.pathname;
      const currentItem = document.querySelector(`[href="${currentUrl}"]`)?.closest('.gallery-item');
      
      if (!currentItem) return;
      
      const visibleItems = [...document.querySelectorAll('.gallery-item[data-show="true"]')];
      const currentIndex = visibleItems.indexOf(currentItem);
      
      let nextIndex;
      if (direction === 'next') {
        nextIndex = currentIndex + 1 >= visibleItems.length ? 0 : currentIndex + 1;
      } else {
        nextIndex = currentIndex - 1 < 0 ? visibleItems.length - 1 : currentIndex - 1;
      }
      
      const nextItem = visibleItems[nextIndex];
      if (nextItem) {
        const link = nextItem.querySelector('a');
        if (link) {
          history.pushState({}, '', link.href);
          openModal(link.href);
          // Dispatch custom event for tracking
          document.dispatchEvent(new CustomEvent('gallery:navigation', {
            detail: {
              url: link.href,
              title: nextItem.querySelector('img')?.alt || document.title
            }
          }));
        }
      }
    }

    // Update modal event listeners
    const modalPrev = modal?.querySelector('.nav-button.prev');
    const modalNext = modal?.querySelector('.nav-button.next');

    modalPrev?.addEventListener('click', () => navigateModal('prev'));
    modalNext?.addEventListener('click', () => navigateModal('next'));

    // Update keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (!modal?.classList.contains('open')) return;

      if (['ArrowLeft', 'ArrowUp'].includes(e.key)) {
        e.preventDefault();
        navigateModal('prev');
      } else if (['ArrowRight', 'ArrowDown'].includes(e.key)) {
        e.preventDefault();
        navigateModal('next');
      }
    });
  }

  // Helper function to get slug by ID (client-side version)
  function getSlugById(id) {
    const item = allGalleryData.sortedGalleryData.find(item => item.id === id);
    if (!item) return id;
    
    let baseSlug = item.name
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-+|-+$/g, '');
      
    return `${baseSlug}-${id.substring(0, 6)}`;
  }

  // Handle both regular page loads and Astro view transitions
  document.addEventListener('astro:page-load', initializeGallery, { once: false });
</script>

<style lang="scss">
  .layout-gallery{
    margin-top: 4rem;

    h1{
      font-size: 2rem;
      line-height: 2.5rem;
    }
  }

  .page-title{
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: .5rem;
  }

  .intro{
    margin-top: 1rem;
    max-width: 38ch;

    a{
      color: var(--yellow-11);
      text-decoration-color: var(--yellow-10);
      transition: color 0.2s, text-decoration-color 0.2s;

      &:hover{
        color: var(--yellow-12);
        text-decoration-color: var(--yellow-11);
      }
    }
  }

  .filter-controls{
    margin-bottom: 1rem;
    margin-top: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--gray-4);
  }

  .filter-toggles{
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
  }

  .filter-toggle-wrapper{
    display: flex;
    align-items: center;
    gap: .5rem;
  }

  .result-count {
    color: var(--gray-11);
    font-size: 0.875rem;
  }

  .filter-toolbar {
    background: var(--gray-3);
    border-radius: .6rem;
    height: 0;
    opacity: .5;
    overflow-y: clip;
    transition: height .3s, opacity .3s, margin-top .3s;
    interpolate-size: allow-keywords;

    &.open {
      height: auto;
      opacity: 1;
      margin-top: 1rem;
    }
  }

  .filter-button{
    display: flex;
    align-items: center;
    gap: .5rem;
    font-family: var(--font-family-sans);
    font-weight: 500;
    font-size: .875rem;
    color: var(--gray-11);
    background: none;
    border: none;
    cursor: pointer;
    padding: .3rem .5rem;
    border-radius: .3rem;
    transition: background 0.2s ease, color 0.2s ease;
    line-height: 18px;

    &:hover{
      background: var(--gray-4);
    }

    &.active{
      background: var(--yellow-4);
      color: var(--yellow-11);

      &:hover{
        background: var(--yellow-5);
        color: var(--yellow-12);
      }
    }
  }

  .filter-section{
    padding: 1rem;

    h3{
      color: var(--gray-11);
      font-size: .875rem;
      font-weight: 500;
      font-stretch: 135%;
      margin-bottom: .5rem;
    }
  }

  .filter-buttons{
    display: flex;
    flex-wrap: wrap;
    gap: .2rem;
  }

  .filter-btn {
    padding: 0.2rem 0.4rem;
    background: var(--gray-3);
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: color 0.2s ease, background 0.2s ease, box-shadow 0.2s ease;
    font-family: var(--font-family-sans);
    font-size: .875rem;
    color: var(--gray-11);

    &:hover {
      background: var(--gray-5);
      color: var(--gray-12);
    }

    &.active {
      background: var(--base);
      color: var(--gray-12);
      box-shadow: var(--elevation-1);
    }
  }

  .date-filters {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;

    label {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: .875rem;
      color: var(--gray-11);
    }

    input {
      font-family: var(--font-family-sans);
      color: var(--gray-12);
      padding: 0.2rem 0.4rem;
      font-size: .875rem;
      border: none;
      border-radius: 4px;
      background: var(--gray-5);
    }
  }

  .gallery {
    width: 100%;
    max-width: 100%;

    .gallery-grid {
      width: 100%;
      display: grid;
      gap: 1em;
      grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
      grid-template-rows: masonry; 
    }
  }

  .gallery-item {
    position: relative;
    margin-bottom: 1em;

    a {
      display: block;
      text-decoration: none;
      color: inherit;
      transition: background 0.2s ease;
      border-radius: 6px;
      padding: 3px;
      background: var(--base);
      border: 1px solid var(--gray-3);

      &:hover{
        background: var(--gray-4);
        border-color: var(--gray-4);
      }
    }

    img {
      width: 100%;
      height: auto;
      object-fit: contain;
      display: block;
      border-radius: 4px;
    }

    .gallery-item-info {
      padding: .4rem;
      position: absolute;
      top: 12px;
      left: 12px;
      background: rgba(0, 0, 0, 0.6);
      color: #fff;
      opacity: 0;
      backdrop-filter: blur(4px);
      transition: opacity 0.3s ease;
      font-size: .625rem;
      font-weight: 500;
      border-radius: 4px;
      max-width: calc(100% - 24px);
    }

    &:hover .gallery-item-info {
      opacity: 1;
    }
  }

  .modal-header{
    background: transparent;
    height: 4rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 1rem;
  }

  .modal-navigation{
    display: flex;
    align-items: center;
    gap: .5rem;
  }

  .key{
    font-family: var(--font-family-mono);
    font-size: 1.3rem;
    color: var(--base);
    background: rgba(255,255,255,.1);
    border-radius: 4px;
    backdrop-filter: blur(12px);
    border: 1px solid rgba(255,255,255,.2);
    box-shadow: 0 -2px 0 rgba(255,255,255,.15) inset;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.6rem;
    height: 1.6rem;
    line-height: 1.3rem;
    cursor: pointer;
    color: #FFF;
    transition: background 0.2s ease, border-color 0.2s ease;

    &:hover{
      background: rgba(255,255,255,.22);
      border-color: rgba(255,255,255,.2);
    }

    &:active{
      transition: none;
      background: rgba(0,0,0,.1);
      border-color: rgba(255,255,255,.2);
      box-shadow: 0 3px 0 rgba(0,0,0,.3) inset;
    }
  }

  .pagination {
    display: flex;
    justify-content: space-between;
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid var(--gray-4);
  }

  .pagination-link {
    color: var(--yellow-11);
    text-decoration-color: var(--yellow-10);
    transition: color 0.2s, text-decoration-color 0.2s;
    font-weight: 500;

    &:hover {
      color: var(--yellow-12);
      text-decoration-color: var(--yellow-11);
    }

    &.next {
      margin-left: auto;
    }
  }

  @media (min-width: 768px) {
    body > main{
      max-width: 100%;
      padding: 0 1rem;
    }
  }

  .loading-indicator {
    text-align: center;
    padding: 2rem;
    color: var(--gray-11);
    font-size: 0.875rem;
  }
</style> 
