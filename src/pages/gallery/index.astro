---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import MatomoTracking from '../../components/MatomoTracking.astro';
import { Image } from 'astro:assets';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import galleryData from '../../data/gallery.json';
import { getSlugById } from '../../utils/slugs';
import GalleryItem from '../../components/GalleryItem.astro';
import RSSIcon from '../../assets/images/rss.svg?raw';
import FilterIcon from '../../assets/images/filter.svg?raw';
import OgImage from '../../assets/images/og-image-gallery.png';

import '../../styles/gallery.scss';
import '../../styles/gallery-modal.scss';

const ogImageToUse = OgImage?.src;

// Sort and filter helpers
const sortByDate = (a: any, b: any) => b.btime - a.btime;

// Update the pagination variables at the top of the file
const itemsPerPage = 100;
const currentPage = 1;
const totalItems = galleryData.length;
const hasMorePages = totalItems > itemsPerPage * currentPage;

// Update the currentPageItems to include the page number
const sortedGalleryData = [...galleryData].sort(sortByDate);
const currentPageItems = sortedGalleryData.slice(
  (currentPage - 1) * itemsPerPage,
  currentPage * itemsPerPage
);

// Replace the image import section with this:
const images = import.meta.glob('../../assets/gallery/*.{png,jpg,jpeg,gif,webp}', {
  eager: true,
});

// Create a map of filenames to their image objects
const imageMap = new Map();
for (const [path, image] of Object.entries(images)) {
  const filename = path.split('/').pop();
  if (filename) {
    imageMap.set(filename, image.default);
  }
}

// Helper function to check if file is a GIF
const isGif = (filename: string) => filename.toLowerCase().endsWith('.gif');

// Helper function to generate URL-friendly slug
function generateSlug(name: string): string {
  return name
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-') // Replace non-alphanumeric chars with hyphens
    .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens
}

// Generate unique slugs for all items
const slugMap = new Map();
galleryData.forEach(item => {
  let baseSlug = generateSlug(item.name);
  let slug = baseSlug;
  
  // If slug already exists, append part of the ID
  while (slugMap.has(slug)) {
    // Use first 6 characters of ID to keep URLs reasonably short
    slug = `${baseSlug}-${item.id.substring(0, 6)}`;
  }
  
  slugMap.set(slug, item);
});

// Get unique folders and tags from gallery data, excluding specific folders
const excludedFolders = ['Personal 2024', 'Website 2024'];
const uniqueFolders = [...new Set(galleryData.flatMap(item => item.folders || []))].filter(folder => !excludedFolders.includes(folder));
const uniqueTags = [...new Set(galleryData.flatMap(item => item.tags || []))];
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Ivo's Design Inspiration Gallery`} description='Designs of websites, apps and other digital products carefully curated by Ivo Mynttinen.' image={ogImageToUse} />
    <MatomoTracking />
  </head>
  <body>
    <Header activePath="gallery" />
    <main class="layout-gallery" data-gallery-index>
      <section class="gallery">
        <div class="page-title">
          <h1>Gallery</h1>
          <a href="/gallery.rss.xml" title="Subscribe to RSS Feed" class="rss-icon">
            <Fragment set:html={RSSIcon} />
          </a>
        </div>
        <p class="intro">
          Design inspiration gallery carefully curated by myself. <a href="/blog/publishing-eagle-app-library-on-the-web-part-1/">Read</a> more about how all this works.
        </p>
        
        <div class="filter-controls">
          <div class="filter-toggles">
            <div class="filter-toggle-wrapper">
              <button id="toggleFilters" class="filter-button">
                <Fragment set:html={FilterIcon} />
                Filters
              </button>
            </div>
            <span id="resultCount" class="result-count">{totalItems} items</span>
          </div>

          <div class="filter-toolbar" id="filterToolbar">
            <div class="filter-section">
              <h3>Categories</h3>
              <div class="filter-buttons" id="folderFilter">
                {uniqueFolders.map(folder => {
                  const urlSafeCategory = folder.toLowerCase().replace(/\s+/g, '-');
                  return (
                    <a 
                      class="filter-btn"
                      href={`/gallery/${urlSafeCategory}/`}
                    >
                      {folder}
                    </a>
                  );
                })}
              </div>
            </div>
  
            <div class="filter-section">
              <h3>Tags</h3>
              <div class="filter-buttons" id="tagFilter">
                {uniqueTags.map(tag => {
                  const urlSafeTag = tag.toLowerCase().replace(/\s+/g, '-');
                  return (
                    <a 
                      class="filter-btn"
                      href={`/gallery/${urlSafeTag}/`}
                    >
                      {tag}
                    </a>
                  );
                })}
              </div>
            </div>
          </div>
        </div>

        <div class="gallery-grid" id="gallery-grid">
          {currentPageItems.map((item) => (
            <GalleryItem item={item} imageMap={imageMap} />
          ))}
        </div>
      </section>
    </main>

    <Footer class="layout-blog" />
    
    <div id="gallery-modal" class="gallery-modal">
      <header class="modal-header">
        <nav class="modal-navigation">
          <button class="key nav-button prev" aria-label="Previous image">←</button>
          <button class="key nav-button next" aria-label="Next image">→</button>
        </nav>
        <button class="key modal-close" aria-label="Close modal">×</button>
      </header>
      <div class="modal-content"></div>
    </div>
  </body>
</html>

<script>
  import { initializeModal } from '../../utils/gallery-modal';

  function initializeGallery() {
    const galleryGrid = document.getElementById('gallery-grid');
    const isGalleryIndex = document.querySelector('[data-gallery-index]');

    if (!galleryGrid) {
      return;
    }

    initializeModal(galleryGrid);
    
    // Only initialize infinite scroll on the main gallery page
    if (isGalleryIndex) {
      initializeLoadMore();
    }
  }

  function initializeLoadMore() {
    const loadMoreBtn = document.getElementById('loadMore');
    const galleryGrid = document.getElementById('gallery-grid');
    let currentPage = 1;
    let isLoading = false;

    async function loadNextPage() {
      if (isLoading) return;
      
      try {
        isLoading = true;
        currentPage++;
        
        const response = await fetch(`/gallery/page/${currentPage}/`);
        const text = await response.text();
        
        const parser = new DOMParser();
        const doc = parser.parseFromString(text, 'text/html');
        
        const newContent = doc.getElementById('gallery-grid');
        
        if (newContent && newContent.children.length > 0) {
          const newItems = Array.from(newContent.children);
          newItems.forEach(item => {
            galleryGrid?.appendChild(item);
          });
        }
      } catch (error) {
        console.error('Error loading more items:', error);
      } finally {
        isLoading = false;
      }
    }
    // Add intersection observer for infinite scroll
    const observerOptions = {
      root: null,
      rootMargin: '200px', // Start loading when within 200px of the bottom
      threshold: 0
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting && !isLoading) {
          loadNextPage();
        }
      });
    }, observerOptions);

    // Observe the last item in the gallery grid
    function observeLastItem() {
      const items = galleryGrid?.children;
      if (items && items.length > 0) {
        observer.disconnect(); // Remove previous observation
        observer.observe(items[items.length - 1]);
      }
    }

    // Initial observation
    observeLastItem();

    // Re-observe after new content is loaded
    const mutationObserver = new MutationObserver(observeLastItem);
    if (galleryGrid) {
      mutationObserver.observe(galleryGrid, { childList: true });
    }
  }

  // Helper function to get slug by ID (client-side version)
  function getSlugById(id) {
    const item = allGalleryData.sortedGalleryData.find(item => item.id === id);
    if (!item) return id;
    
    let baseSlug = item.name
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-+|-+$/g, '');
      
    return `${baseSlug}-${id.substring(0, 6)}`;
  }

  function initializeFilterToggle() {
    // Remove any existing event listeners
    const oldButton = document.getElementById('toggleFilters');
    if (oldButton) {
      const newButton = oldButton.cloneNode(true);
      oldButton.parentNode?.replaceChild(newButton, oldButton);
    }

    const toggleButton = document.getElementById('toggleFilters');
    const filterToolbar = document.getElementById('filterToolbar');
    const isGalleryIndex = document.querySelector('[data-gallery-index]');

    if (!toggleButton || !filterToolbar) return;

    // Only reset state on the index page
    if (isGalleryIndex) {
      filterToolbar.classList.remove('open');
      toggleButton.classList.remove('active');
    }

    toggleButton.addEventListener('click', () => {
      filterToolbar.classList.toggle('open');
      // Only toggle active class if not on index page
      if (!isGalleryIndex) {
        toggleButton.classList.toggle('active');
      }
    });
  }

  // Handle both regular page loads and Astro view transitions
  document.addEventListener('astro:page-load', () => {
    initializeGallery();
    initializeFilterToggle();
  }, { once: false });

  // Clean up when navigating away
  document.addEventListener('astro:before-preparation', () => {
    const toggleButton = document.getElementById('toggleFilters');
    if (toggleButton) {
      toggleButton.replaceWith(toggleButton.cloneNode(true));
    }
  }, { once: false });
</script>
