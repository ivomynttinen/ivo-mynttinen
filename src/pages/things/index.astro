---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import MatomoTracking from '../../components/MatomoTracking.astro';
import { THINGS_CATEGORIES } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';
import { Image } from 'astro:assets';
import ChevronRight from '../../assets/images/chevron-right.svg?raw';
import ChevronLeft from '../../assets/images/chevron-left.svg?raw';
import RSSIcon from '../../assets/images/rss.svg?raw';

const thingsPosts = (await getCollection('things')).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

const postsByCategory = THINGS_CATEGORIES.reduce((acc, category) => {
  acc[category] = thingsPosts.filter(post => post.data.category === category);
  return acc;
}, {});

// Modify the sorting and grouping logic
const sortedCategories = THINGS_CATEGORIES
  .filter(category => {
    // Only include categories that have posts
    const posts = postsByCategory[category];
    return posts && posts.length > 0;
  })
  .sort((a, b) => {
    if (a === 'archive') return 1;  // Archive always last
    if (b === 'archive') return -1; // Archive always last
    
    // Get the most recent post date for each category
    const aLatestDate = Math.max(...postsByCategory[a].map(post => post.data.pubDate.valueOf()));
    const bLatestDate = Math.max(...postsByCategory[b].map(post => post.data.pubDate.valueOf()));
    return bLatestDate - aLatestDate;
  });
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Collection of Things by Ivo Mynttinen`} description="A curated collection of hardware, software, and tools I use and recommend." />
    <MatomoTracking />
  </head>
  <body>
    <Header activePath="things" />
    <main class="layout-things">
      <section>
        <div class="page-title">
          <h1>Things</h1>
          <a href="/things/rss.xml" title="RSS feed for Things" class="rss-icon">
            <Fragment set:html={RSSIcon} />
          </a>
        </div>
        <p class="intro">A curated collection of hardware, software, and tools I use and recommend.</p>
        
        {sortedCategories.map(category => (
          <div class="category-section">
            <h2 class="category-title">
              <a href={`/things/category/${category}/`} title={`View all items in ${category}`}>
                {category.charAt(0).toUpperCase() + category.slice(1)}
              </a>
              <div class="carousel-controls">
                <button class="carousel-button prev" aria-label="Previous items">
                  <Fragment set:html={ChevronLeft} />
                </button>
                <button class="carousel-button next" aria-label="Next items">
                  <Fragment set:html={ChevronRight} />
                </button>
              </div>
            </h2>
            <div class="carousel">
              <div class="carousel-container">
                <ul class="posts">
                  {postsByCategory[category].map((post) => (
                    <li>
                      <a href={`/things/${post.slug}/`} class="post tile">
                        {post.data.heroImage && (
                          <div class="hero-image">
                            <Image 
                              src={post.data.heroImage}
                              alt={post.data.title}
                              widths={[200, 240, 280, 400, 480, 560]}
                              sizes="(max-width: 768px) 200px, (max-width: 1024px) 240px, 280px"
                              class="cover-image"
                            />
                          </div>
                        )}
                        <h3 class="title">{post.data.title}</h3>
                      </a>
                    </li>
                  ))}
                  <li class="spacer"></li>
                </ul>
              </div>
            </div>
          </div>
        ))}

        <footer class="transparency-note">
          <h2>Transparency note</h2>
          <p>Some items on this page might be linked via affiliate links and for purchases made through these links I might receive a small (2-3%) commission. The products featured here are still the ones I use and recommend, and I only recommend products I use myself. The funds received from the affiliate links help me keep this site running and allows me to continue to provide free content.</p>
        </footer>
      </section>
    </main>
    <Footer class="layout-blog" />
  </body>
</html>

<script>
  function initializeCarousels() {
    const carousels = document.querySelectorAll('.carousel');
    
    carousels.forEach(carousel => {
      const container = carousel.querySelector('.carousel-container');
      const prevBtn = carousel.parentElement.querySelector('.prev');
      const nextBtn = carousel.parentElement.querySelector('.next');
      
      if (!container || !prevBtn || !nextBtn) return;
      
      const scrollAmount = 300;

      // Remove existing event listeners if any
      const oldPrevClick = prevBtn.onclick;
      const oldNextClick = nextBtn.onclick;
      if (oldPrevClick) prevBtn.removeEventListener('click', oldPrevClick);
      if (oldNextClick) nextBtn.removeEventListener('click', oldNextClick);

      prevBtn.addEventListener('click', () => {
        container.scrollBy({
          left: -scrollAmount,
          behavior: 'smooth'
        });
        updateButtonStates();
      });

      nextBtn.addEventListener('click', () => {
        container.scrollBy({
          left: scrollAmount,
          behavior: 'smooth'
        });
        updateButtonStates();
      });

      function updateButtonStates() {
        const isPrevDisabled = container.scrollLeft === 0;
        const isNextDisabled = container.scrollLeft >= container.scrollWidth - container.clientWidth;
        
        prevBtn.disabled = isPrevDisabled;
        nextBtn.disabled = isNextDisabled;
      }

      container.addEventListener('scroll', updateButtonStates);
      updateButtonStates();
      window.addEventListener('resize', updateButtonStates);
    });
  }

  // Initialize on initial page load
  document.addEventListener('DOMContentLoaded', initializeCarousels);

  // Initialize on Astro view transitions
  document.addEventListener('astro:page-load', initializeCarousels);
</script>

<style lang="scss">
  .layout-things{
    margin-top: 4rem;
  
    h1{
      font-size: 2rem;
      line-height: 2.5rem;
    }
  }

  .page-title{
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: .5rem;
  }
  
  .intro{
    margin-top: 1rem;
    max-width: 38ch;
  }

  .posts{
    display: flex;
    gap: 1rem;
    list-style: none;
    padding: 0;
    margin: 0;

    li{
      width: 200px;
      min-height: 200px;
      flex-shrink: 0;
    }

    .spacer{
      width: 10px;
      flex-shrink: 0;
    }
  }

  .post{
    padding: .2rem .2rem .625rem .2rem;
    height: 100%;
    display: flex;
    flex-direction: column;
    gap: .5rem;
    text-decoration: none;

    .title{
      font-size: .875rem;
      line-height: 1rem;
      color: var(--gray-11);
      font-weight: 700;
      font-family: var(--font-family-syne);
      padding: 0 .625rem;
    }

    .hero-image{
      img{
        display: block;
        border-radius: 4px;
        max-width: 100%;
        height: auto;
      }
    }
  }

  .transparency-note{
    margin-top: 4rem;
    font-family: var(--font-family-syne);
    max-width: 640px;

    h2{
      font-size: 1rem;
      line-height: 1.5rem;
      color: var(--gray-11);
    }

    p{
      color: var(--gray-10);
      font-size: 0.85rem;
      line-height: 1.125rem;
      margin-top: 0.5rem;
    }
  }

  .category-section {
    margin-top: 2rem;

    .category-title {
      font-family: var(--font-family-syne);
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin: 0;
      font-size: 1.5rem;
      line-height: 1.6rem;

      a{
        text-decoration: none;
        color: var(--gray-12);
        border-radius: 6px;
        padding: 4px 8px;
        transition: background 0.2s;

        &:hover{
          background: var(--gray-3);
        }
      }
    }
  }

  .carousel-controls {
    display: flex;
    gap: 0.5rem;
  }

  .carousel {
    position: relative;
    width: calc(100% + 1rem);
    margin-right: -1rem;
  }

  .carousel-container {
    width: 100%;
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
    scroll-behavior: smooth;
    padding: 14px 0 16px 8px;
    
    &::-webkit-scrollbar {
      display: none;
    }
  }

  .carousel-button {
    padding: 0.25rem;
    background: var(--gray-5);
    color: var(--gray-11);
    border: none;
    border-radius: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
    cursor: pointer;
    opacity: .8;
    transition: opacity 0.2s;

    &:hover {
      opacity: 1;
    }

    &:disabled {
      opacity: 0.4;
      cursor: not-allowed;
    }
  }
  
  @media (min-width: 768px) {
    body > main{
      max-width: 100%;
      padding: 0 1rem;
    }

    .posts{
      li{
        width: 240px;
        min-height: 240px;
      }
    }

    .post{
      gap: 1rem;
      padding: .375rem .375rem 1rem .375rem;

      .title{
        font-size: 1.125rem;
        line-height: 1.2rem;
      }
    }
  }

  @media (min-width: 1024px) {
    .posts{
      li{
        width: 280px;
        min-height: 280px;
      }
    }
  }
</style>
