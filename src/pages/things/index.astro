---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import MatomoTracking from '../../components/MatomoTracking.astro';
import { THINGS_CATEGORIES } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';

const thingsPosts = (await getCollection('things')).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

const postsByCategory = THINGS_CATEGORIES.reduce((acc, category) => {
  acc[category] = thingsPosts.filter(post => post.data.category === category);
  return acc;
}, {});

// Modify the sorting and grouping logic
const sortedCategories = THINGS_CATEGORIES
  .filter(category => {
    // Only include categories that have posts
    const posts = postsByCategory[category];
    return posts && posts.length > 0;
  })
  .sort((a, b) => {
    if (a === 'archive') return 1;  // Archive always last
    if (b === 'archive') return -1; // Archive always last
    
    // Get the most recent post date for each category
    const aLatestDate = Math.max(...postsByCategory[a].map(post => post.data.pubDate.valueOf()));
    const bLatestDate = Math.max(...postsByCategory[b].map(post => post.data.pubDate.valueOf()));
    return bLatestDate - aLatestDate;
  });
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Collection of Things by Ivo Mynttinen`} description="A curated collection of hardware, software, and tools I use and recommend." />
    <MatomoTracking />
  </head>
  <body>
    <Header activePath="things" />
    <main class="layout-things">
      <section>
        <h1>Things</h1>
        <p class="intro">A curated collection of hardware, software, and tools I use and recommend.</p>
        
        {sortedCategories.map(category => (
          <div class="category-section">
            <h2>
              <a href={`/things/category/${category}/`}>
                {category.charAt(0).toUpperCase() + category.slice(1)}
              </a>
              <div class="carousel-controls">
                <button class="carousel-btn prev" aria-label="Previous items">←</button>
                <button class="carousel-btn next" aria-label="Next items">→</button>
              </div>
            </h2>
            <div class="carousel">
              <div class="carousel-container">
                <ul class="posts-list">
                  {postsByCategory[category].map((post) => (
                    <li>
                      <a href={`/things/${post.slug}/`}>
                        {post.data.heroImage && (
                          <img width={720} height={360} src={post.data.heroImage.src} alt="" />
                        )}
                        <h3 class="title">{post.data.title}</h3>
                        <p class="date">
                          <FormattedDate date={post.data.pubDate} />
                          {post.data.updatedDate && (
                            <span> (Updated: <FormattedDate date={post.data.updatedDate} />)</span>
                          )}
                        </p>
                        <p class="description">{post.data.description}</p>
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        ))}

        <footer class="transparency-note">
          <h2>Transparency note</h2>
          <p>Some items on this page might be linked via affiliate links and for purchases made through these links I might receive a small (2-3%) commission. The products featured here are still the ones I use and recommend, and I only recommend products I use myself. The funds received from the affiliate links help me keep this site running and allows me to continue to provide free content.</p>
        </footer>
      </section>
    </main>
    <Footer class="layout-blog" />
  </body>
</html> 

<style lang="scss">
  .layout-things{
    margin-top: 4rem;
  
    h1{
      font-size: 2rem;
      line-height: 2.5rem;
    }
  }
  
  .intro{
    margin-top: 1rem;
    max-width: 38ch;
  }

  .transparency-note{
    margin-top: 4rem;
    font-family: var(--font-family-syne);
    max-width: 640px;

    h2{
      font-size: 1rem;
      line-height: 1.5rem;
      color: var(--gray-11);
    }

    p{
      color: var(--gray-10);
      font-size: 0.85rem;
      line-height: 1.125rem;
      margin-top: 0.5rem;
    }
  }

  .category-section {
    h2 {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }
  }

  .carousel-controls {
    display: flex;
    gap: 0.5rem;
  }

  .carousel {
    position: relative;
    width: 100%;
    margin: 1rem 0;
  }

  .carousel-container {
    width: 100%;
    overflow-x: auto;
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE and Edge */
    scroll-behavior: smooth;
    
    &::-webkit-scrollbar {
      display: none; /* Chrome, Safari and Opera */
    }
  }

  .posts-list {
    display: flex;
    gap: 1rem;
    width: max-content; // Allow natural width of all items

    li{
      width: 300px;
      background-color: var(--gray-3);
    }
  }

  .carousel-btn {
    padding: 0.25rem;
    background: var(--gray-5);
    border: none;
    border-radius: 50%;
    width: 2rem;
    height: 2rem;
    cursor: pointer;
    opacity: 0.8;
    transition: opacity 0.2s;

    &:hover {
      opacity: 1;
    }

    &:disabled {
      opacity: 0.3;
      cursor: not-allowed;
    }
  }
  
  @media (min-width: 768px) {
    body > main{
      max-width: 100%;
      padding: 0 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('.carousel');
    
    carousels.forEach(carousel => {
      const container = carousel.querySelector('.carousel-container');
      const prevBtn = carousel.parentElement.querySelector('.prev');
      const nextBtn = carousel.parentElement.querySelector('.next');
      
      if (!container || !prevBtn || !nextBtn) return;
      
      const scrollAmount = 300;

      prevBtn.addEventListener('click', () => {
        container.scrollBy({
          left: -scrollAmount,
          behavior: 'smooth'
        });
        updateButtonStates();
      });

      nextBtn.addEventListener('click', () => {
        container.scrollBy({
          left: scrollAmount,
          behavior: 'smooth'
        });
        updateButtonStates();
      });

      function updateButtonStates() {
        prevBtn.disabled = container.scrollLeft === 0;
        nextBtn.disabled = container.scrollLeft >= container.scrollWidth - container.clientWidth;
        prevBtn.style.opacity = prevBtn.disabled ? '0.3' : '0.8';
        nextBtn.style.opacity = nextBtn.disabled ? '0.3' : '0.8';
      }

      container.addEventListener('scroll', updateButtonStates);
      updateButtonStates();
      window.addEventListener('resize', updateButtonStates);
    });
  });
</script>
  